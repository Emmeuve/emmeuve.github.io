name: Update Behance Projects

on:
  schedule:
    # Ejecutar todos los d√≠as a las 6 AM UTC (3 AM Chile)
    - cron: '0 6 * * *'
  workflow_dispatch: # Permitir ejecuci√≥n manual desde GitHub
  push:
    branches:
      - main
    paths:
      - '.github/workflows/update-behance.yml'

# Permisos necesarios para el workflow
permissions:
  contents: write
  actions: read

jobs:
  update-behance:
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true
      
      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: üì¶ Install dependencies
        run: |
          npm init -y
          npm install xml2js node-fetch@2
      
      - name: üé® Fetch Behance Projects
        run: |
          node << 'EOF'
          const fetch = require('node-fetch');
          const xml2js = require('xml2js');
          const fs = require('fs');
          const path = require('path');
          
          const username = 'Emmeuve'; // Tu username de Behance
          const maxProjects = 12;
          
          (async () => {
            try {
              console.log('üîç Fetching Behance RSS feed...');
              
              const response = await fetch(
                `https://www.behance.net/feeds/user?username=${username}`,
                {
                  headers: {
                    'User-Agent': 'Mozilla/5.0 (compatible; BehanceBot/1.0)'
                  }
                }
              );
              
              if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
              }
              
              const xmlData = await response.text();
              console.log('‚úÖ RSS feed fetched successfully');
              
              const parser = new xml2js.Parser();
              const result = await parser.parseStringPromise(xmlData);
              
              if (!result.rss || !result.rss.channel || !result.rss.channel[0].item) {
                throw new Error('Invalid RSS structure');
              }
              
              const items = result.rss.channel[0].item;
              console.log(`üìä Found ${items.length} projects`);
              
              const projects = items.slice(0, maxProjects).map((item, index) => {
                const content = item.description ? item.description[0] : '';
                
                // Extraer imagen - buscar la de mejor calidad
                let imageUrl = '';
                
                // Buscar todas las im√°genes en el contenido
                const imgMatches = content.match(/<img[^>]+src="([^">]+)"/g);
                
                if (imgMatches && imgMatches.length > 0) {
                  console.log(`üì∏ Proyecto "${item.title[0]}" tiene ${imgMatches.length} im√°genes`);
                  
                  // Extraer la primera imagen (suele ser la portada)
                  const firstImg = imgMatches[0].match(/src="([^">]+)"/);
                  if (firstImg) {
                    imageUrl = firstImg[1];
                    
                    // Intentar obtener versi√≥n de mayor calidad
                    // Behance usa URLs como: /url/404.jpg o /url/original.jpg
                    imageUrl = imageUrl.replace('/404/', '/original/');
                    imageUrl = imageUrl.replace('_404.', '_original.');
                    
                    // Si tiene par√°metros de tama√±o, usar imagen original
                    if (imageUrl.includes('?')) {
                      imageUrl = imageUrl.split('?')[0];
                    }
                    
                    console.log(`  ‚úÖ Imagen encontrada: ${imageUrl.substring(0, 80)}...`);
                  }
                } else {
                  console.warn(`  ‚ö†Ô∏è No se encontr√≥ imagen para "${item.title[0]}"`);
                }
                
                // Limpiar descripci√≥n de HTML
                const cleanDesc = content
                  .replace(/<[^>]*>/g, '')
                  .replace(/&nbsp;/g, ' ')
                  .replace(/&amp;/g, '&')
                  .replace(/&quot;/g, '"')
                  .replace(/&apos;/g, "'")
                  .trim()
                  .substring(0, 150);
                
                return {
                  id: `behance-project-${index + 1}`,
                  title: item.title ? item.title[0] : 'Untitled Project',
                  link: item.link ? item.link[0] : '',
                  description: cleanDesc || 'Ver proyecto en Behance',
                  image: imageUrl,
                  pubDate: item.pubDate ? item.pubDate[0] : new Date().toISOString(),
                  source: 'behance'
                };
              });
              
              const data = {
                lastUpdate: new Date().toISOString(),
                username: username,
                totalProjects: projects.length,
                projects: projects
              };
              
              // Log de proyectos con y sin im√°genes
              const projectsWithImages = projects.filter(p => p.image && p.image.length > 0).length;
              const projectsWithoutImages = projects.length - projectsWithImages;
              
              console.log(`\nüìä Resumen de im√°genes:`);
              console.log(`  ‚úÖ Proyectos con imagen: ${projectsWithImages}`);
              console.log(`  ‚ö†Ô∏è Proyectos sin imagen: ${projectsWithoutImages}`);
              
              // Asegurar que el directorio existe
              const dataDir = path.join(process.cwd(), 'assets', 'data');
              if (!fs.existsSync(dataDir)) {
                fs.mkdirSync(dataDir, { recursive: true });
              }
              
              const filePath = path.join(dataDir, 'behance-projects.json');
              fs.writeFileSync(filePath, JSON.stringify(data, null, 2));
              
              console.log('‚úÖ Projects saved to:', filePath);
              console.log(`üìÅ Total projects saved: ${projects.length}`);
              console.log('üéâ Update completed successfully!');
              
            } catch (error) {
              console.error('‚ùå Error:', error.message);
              console.error('Stack:', error.stack);
              process.exit(1);
            }
          })();
          EOF
      
      - name: üì§ Commit and push changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Agregar archivo
          git add assets/data/behance-projects.json
          
          # Verificar si hay cambios
          if git diff --staged --quiet; then
            echo "‚ÑπÔ∏è No changes to commit"
            exit 0
          fi
          
          # Hacer commit
          git commit -m "ü§ñ Update Behance projects [automated]"
          
          # Intentar push con retry
          max_attempts=3
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "üì§ Attempting push (attempt $attempt/$max_attempts)..."
            
            if git push origin main; then
              echo "‚úÖ Changes pushed successfully"
              exit 0
            fi
            
            echo "‚ö†Ô∏è Push failed, retrying in 5 seconds..."
            sleep 5
            attempt=$((attempt + 1))
          done
          
          echo "‚ùå Failed to push after $max_attempts attempts"
          exit 1
      
      - name: üìä Summary
        if: always()
        run: |
          echo "### üé® Behance Projects Update" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Username:** Emmeuve" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          
          if [ -f assets/data/behance-projects.json ]; then
            PROJECTS_COUNT=$(cat assets/data/behance-projects.json | grep -o '"totalProjects":[0-9]*' | grep -o '[0-9]*' || echo "0")
            echo "- **Projects Found:** $PROJECTS_COUNT" >> $GITHUB_STEP_SUMMARY
          fi